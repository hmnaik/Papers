<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"><title>Camera pose estimation from dot pattern</title>
</head><body>
<h1>Automatic camera pose estimation from dot pattern</h1>
<h2> George Vogiatzis and Carlos Hernández</h2>

This is a simple but convenient set of matlab scripts for calibrating an
 image sequence for use in multi-view stereo algorithms. It is based on 
the use of a planar pattern that can be printed and placed in the scene 
below the object that will be reconstructed. The pattern, shown below 
consists of black dots randomly placed on a sheet of A4. It has been 
especially designed to be detectable under significant occlusion and 
hence is very useful for obtaining camera pose in a MVS sequence without
 sacrificing too many pixels, or manually clicking on any points.

<p><img src="Camera%20pose%20estimation%20from%20dot%20pattern_files/pattern.png">


</p><p>To use our method, just print out this <a href="http://george-vogiatzis.org/calib/pattern.pdf">pdf file</a>
 and put it on a table. Then place your object on the pattern and take 
photographs from around the object, like those shown below.

</p><p><img src="Camera%20pose%20estimation%20from%20dot%20pattern_files/sm_house00.png"><img src="Camera%20pose%20estimation%20from%20dot%20pattern_files/sm_house01.png"><img src="Camera%20pose%20estimation%20from%20dot%20pattern_files/sm_house02.png"><img src="Camera%20pose%20estimation%20from%20dot%20pattern_files/sm_house03.png"><img src="Camera%20pose%20estimation%20from%20dot%20pattern_files/sm_house04.png">

</p><p>You can then run our script to obtain camera intrinsics and pose 
on each image in your sequence. The script also produces visualisation 
of the pattern detection in each frame, as well as a plot of the whole 
3d structure of the scene in the end.

</p><p><img src="Camera%20pose%20estimation%20from%20dot%20pattern_files/calib_img.png"><img src="Camera%20pose%20estimation%20from%20dot%20pattern_files/calib_plot3.png">

</p><p>The file <a href="http://george-vogiatzis.org/calib/patterncalib.zip">patterncalib.zip</a>
 contains a set of matlab scripts that perform fully automatic 
calibration (camera pose and intrinsics) from a set of images of a 
planar pattern (included as a pdf file). 
</p>

<p> The main calibration routine is <b>calibseq</b>. Its input is a 
filename pattern that determines which images should be operated on, as 
well as some optional parameter values. The output is a bundle adjusted 
estimate of camera intrinsics and pose per image, as well as the refined
 3d positions of the dots. Due to this refinement the method can 
tolerate some non planarity of the pattern and the only real constraint 
is constant focal length througout the sequence. This will probably be 
relaxed in future releases. 

</p><p> Our calibration method also relies on J.-Y. Bouguet's 
Calibration Toolbox for the initial estimate of camera pose and 
intrinsics. You can find a version of that toolbox that has been tested 
with our method <a href="http://george-vogiatzis.org/calib/TOOLBOX_calib.zip">here</a>, even though it will probably work with more recent versions that you can find on <a href="http://www.vision.caltech.edu/bouguetj/calib_doc/">his website</a>. 

</p><p> Finally, we have included a set of test images for you to try out <a href="http://george-vogiatzis.org/calib/test_sequence.zip">here</a>. Just unzip the file somewhere, say in "myimages", and do
</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>C=calibseq("myimages/house*.png");</b>
</p><p> to see the calibration method in action. At the end of the process the output variable <b>C</b> is a structure that contains all calibration parameters such as the calibration matrix <b>K</b> , camera rotation (in a 3x3 matrix <b>R</b>  as well as a 4x1 quaternion representation <b>Q</b>) and translation (<b>t</b>) per camera as well as the homography (<b>Hs</b>) corresponding to each planar pattern. Also included is the refined 3d structure (<b>pts3d</b>) corrsponding to the optimized 3d positions of the pattern dots as well as the centers of the detected ellipses (<b>pts2d</b>) and the 2d-3d correspondences (<b>matches</b>) per image.



</p><h2> Installation instructions </h2>

<p>1. Download <a href="http://george-vogiatzis.org/calib/patterncalib.zip">patterncalib.zip</a> and unzip in to some directory MYDIR
</p><p>2. From within Matlab, execute
</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>addpath MYDIR/patterncalib</b>
</p><p>3. Download and unzip into MYDIR, J.-Y. Bouguet's Calibration Toolbox from <a href="http://www.vision.caltech.edu/bouguetj/calib_doc/">his website</a>. A version that we have already tested against can be found <a href="http://george-vogiatzis.org/calib/TOOLBOX_calib.zip">here</a>.
</p><p>4. From within Matlab, execute
</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>addpath MYDIR/TOOLBOX_calib</b>
</p><p>5. To test the software, download a test sequence from <a href="http://george-vogiatzis.org/calib/test_sequence.zip">here</a> and unzip the file in some directory, say "myimages".
</p><p>6. From within matlab execute 
</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>C=calibseq("myimages/house*.png");</b>
</p><p>7. To find out about syntax and options for calibseq, do 
</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>help calibseq;</b>
</p><p>Enjoy ...



</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>Copyright (2010) George Vogiatzis and Carlos Hernández Esteban


</p></body></html>